/**
 * This file is auto-generated by yarn generate:mcp-tools
 * DO NOT EDIT THIS FILE MANUALLY
 */

import { z } from "zod";
import { TaskadeMCPServer } from "./server";
export const setupTools = (server: TaskadeMCPServer) => {
  server.tool(
    "workspaceCreateProject",
    "Create a project in a workspace",
    z.object({
      contentType: z.literal("text/markdown").optional(),
      content: z.string().optional(),
      workspaceId: z.string(),
    }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/workspaces/{workspaceId}/projects",
        method: "POST",
        input: args,
        pathParamKeys: ["workspaceId"],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "workspacesGet",
    "Get all workspaces for a user",
    z.object({}).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/workspaces",
        method: "GET",
        input: args,
        pathParamKeys: [],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "workspaceFoldersGet",
    "Get all folders for a workspace",
    z.object({ workspaceId: z.string() }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/workspaces/{workspaceId}/folders",
        method: "GET",
        input: args,
        pathParamKeys: ["workspaceId"],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "projectGet",
    "Get project",
    z.object({ projectId: z.string() }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/projects/{projectId}",
        method: "GET",
        input: args,
        pathParamKeys: ["projectId"],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "projectCopy",
    "Copy a project to a folder",
    z.object({
      folderId: z.string().min(1).optional(),
      projectTitle: z.string().min(1).optional(),
      projectId: z.string(),
    }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/projects/{projectId}/copy",
        method: "POST",
        input: args,
        pathParamKeys: ["projectId"],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "projectCreate",
    "Create a project in a team",
    z.object({
      folderId: z.string().min(1).optional(),
      contentType: z.literal("text/markdown").optional(),
      content: z.string().optional(),
    }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/projects",
        method: "POST",
        input: args,
        pathParamKeys: [],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "projectBlocksGet",
    "Get all blocks for a project",
    z.object({
      projectId: z.string(),
      limit: z.number().default(100),
      after: z.string().uuid().optional(),
      before: z.string().uuid().optional(),
    }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/projects/{projectId}/blocks",
        method: "GET",
        input: args,
        pathParamKeys: ["projectId"],
        queryParamKeys: ["limit", "after", "before"],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "projectTasksGet",
    "Get all tasks for a project",
    z.object({
      projectId: z.string(),
      limit: z.number().default(100),
      after: z.string().uuid().optional(),
      before: z.string().uuid().optional(),
    }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/projects/{projectId}/tasks",
        method: "GET",
        input: args,
        pathParamKeys: ["projectId"],
        queryParamKeys: ["limit", "after", "before"],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "taskGet",
    "Get task with id",
    z.object({ projectId: z.string(), taskId: z.string() }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/projects/{projectId}/tasks/{taskId}",
        method: "GET",
        input: args,
        pathParamKeys: ["projectId", "taskId"],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "taskPut",
    "Update task.",
    z.object({
      contentType: z.enum(["text/markdown", "text/plain"]).optional(),
      content: z
        .string()
        .regex(new RegExp("^[^\\r\\n]*$"))
        .max(2000)
        .optional(),
      projectId: z.string(),
      taskId: z.string(),
    }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/projects/{projectId}/tasks/{taskId}",
        method: "PUT",
        input: args,
        pathParamKeys: ["projectId", "taskId"],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "taskComplete",
    "Complete a task in a project",
    z.object({ projectId: z.string(), taskId: z.string() }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/projects/{projectId}/tasks/{taskId}/complete",
        method: "POST",
        input: args,
        pathParamKeys: ["projectId", "taskId"],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "taskCreate",
    "Create one or more tasks in a project",
    z.object({
      tasks: z
        .array(
          z.intersection(
            z.object({
              contentType: z.enum(["text/markdown", "text/plain"]),
              content: z.string().max(2000),
            }),
            z.union([
              z
                .object({
                  taskId: z.literal("null").optional(),
                  placement: z.enum(["afterbegin", "beforeend"]),
                })
                .strict(),
              z
                .object({
                  taskId: z.string(),
                  placement: z.enum([
                    "beforebegin",
                    "afterbegin",
                    "beforeend",
                    "afterend",
                  ]),
                })
                .strict(),
            ]),
          ),
        )
        .max(20)
        .optional(),
      projectId: z.string(),
    }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/projects/{projectId}/tasks/",
        method: "POST",
        input: args,
        pathParamKeys: ["projectId"],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "taskMove",
    "Move a task within the project",
    z.object({
      target: z
        .object({
          taskId: z.string().min(1),
          position: z.enum([
            "beforebegin",
            "afterbegin",
            "beforeend",
            "afterend",
          ]),
        })
        .strict()
        .optional(),
      projectId: z.string(),
      taskId: z.string(),
    }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/projects/{projectId}/tasks/{taskId}/move",
        method: "PUT",
        input: args,
        pathParamKeys: ["projectId", "taskId"],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "taskAssigneesGet",
    "Get the assignees of a task",
    z.object({ projectId: z.string(), taskId: z.string() }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/projects/{projectId}/tasks/{taskId}/assignees",
        method: "GET",
        input: args,
        pathParamKeys: ["projectId", "taskId"],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "taskPutAssignees",
    "Task assignment",
    z.object({
      handles: z.array(z.string().min(1)).optional(),
      projectId: z.string(),
      taskId: z.string(),
    }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/projects/{projectId}/tasks/{taskId}/assignees",
        method: "PUT",
        input: args,
        pathParamKeys: ["projectId", "taskId"],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "taskDeleteAssignees",
    "Remove assignee from a task",
    z.object({
      projectId: z.string(),
      taskId: z.string(),
      assigneeHandle: z.string(),
    }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/projects/{projectId}/tasks/{taskId}/assignees/{assigneeHandle}",
        method: "DELETE",
        input: args,
        pathParamKeys: ["projectId", "taskId", "assigneeHandle"],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "taskGetDate",
    "Get the date of a task",
    z.object({ projectId: z.string(), taskId: z.string() }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/projects/{projectId}/tasks/{taskId}/date",
        method: "GET",
        input: args,
        pathParamKeys: ["projectId", "taskId"],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "taskDeleteDate",
    "Delete date of a task",
    z.object({ projectId: z.string(), taskId: z.string() }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/projects/{projectId}/tasks/{taskId}/date",
        method: "DELETE",
        input: args,
        pathParamKeys: ["projectId", "taskId"],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "taskPutDate",
    "Create or update date for a task",
    z.object({
      start: z
        .object({
          date: z.string().regex(new RegExp("^\\d{4}-\\d{2}-\\d{2}$")),
          time: z
            .union([
              z
                .string()
                .regex(
                  new RegExp(
                    "^(?:[0-1][0-9]|[2][0-3]):[0-5][0-9](?::[0-5][0-9])?$",
                  ),
                ),
              z.null(),
            ])
            .optional(),
          timezone: z.union([z.string(), z.null()]).optional(),
        })
        .strict()
        .optional(),
      end: z
        .object({
          date: z.string().regex(new RegExp("^\\d{4}-\\d{2}-\\d{2}$")),
          time: z
            .union([
              z
                .string()
                .regex(
                  new RegExp(
                    "^(?:[0-1][0-9]|[2][0-3]):[0-5][0-9](?::[0-5][0-9])?$",
                  ),
                ),
              z.null(),
            ])
            .optional(),
          timezone: z.union([z.string(), z.null()]).optional(),
        })
        .strict()
        .optional(),
      projectId: z.string(),
      taskId: z.string(),
    }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/projects/{projectId}/tasks/{taskId}/date",
        method: "PUT",
        input: args,
        pathParamKeys: ["projectId", "taskId"],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "taskNotePut",
    "Add/update a note to the task",
    z.object({
      type: z.enum(["text/plain", "text/markdown"]).optional(),
      value: z.string().regex(new RegExp("^[^\\r\\n]*$")).min(1).optional(),
      projectId: z.string(),
      taskId: z.string(),
    }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/projects/{projectId}/tasks/{taskId}/note",
        method: "PUT",
        input: args,
        pathParamKeys: ["projectId", "taskId"],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );

  server.tool(
    "folderProjectsGet",
    "Get all projects in a team, or in the home team of a workspace.",
    z.object({ folderId: z.string() }).shape,
    async (args) => {
      const response = await server.callOperation({
        path: "/folders/{folderId}/projects",
        method: "GET",
        input: args,
        pathParamKeys: ["folderId"],
        queryParamKeys: [],
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response),
          },
        ],
      };
    },
  );
};
